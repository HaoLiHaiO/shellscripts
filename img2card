#!/usr/bin/env bash

#########################################################################
# Made by    : Ewoud Dronkert
# Licence    : GNU GPL v3
# Platform   : macOS
# Requires   : bash, diskutil, dd
# Location   : ~/bin/
# Name       : img2card
# Version    : 2.0.0
# Date       : 2018-02-09
# Purpose    : Write disk image to SD card
# Parameters : Optional [disk image file name]
# Settings   : SEARCHDIR = where to look for image files (~/Downloads)
#            : SEARCHPAT = file name pattern of image files (*.img)
#            : WPACONF = Wi-Fi settings file (~/.ssh/wpa_supplicant.conf)
# Exit     0 : No script errors, image written, card ejected
#          1 : No argument and no image found
#          2 : Argument or image not a file
#          3 : Argument or image not readable
#          4 : Argument or image not named *.img
#          5 : SD card not found
#          6 : SD card not unmounted
#          7 : Image not written
#          8 : Wi-Fi settings not copied
#          9 : SD card not ejected
#########################################################################

# Settings
SEARCHDIR=~/Downloads
SEARCHPAT='*.img'
WPACONF=~/.ssh/wpa_supplicant.conf

# Find image file
if [ -z "$1" ]; then
	N=$(ls -d "$SEARCHDIR"/$SEARCHPAT 2> /dev/null | wc -l | xargs)
	if [ "$N" -eq 0 ]; then
		SCRIPT=$(basename "$0")
		echo "No disk image found in '$SEARCHDIR'. Usage: ${SCRIPT} [.img file]" 1>&2
		exit 1
	fi
	if [ "$N" -eq 1 ]; then
		IMG=$(ls -d "$SEARCHDIR"/$SEARCHPAT)
		F=$(basename "$IMG")
		echo "Disk image found: $F"
	else
		echo "Multiple disk image files found in $SEARCHDIR"
		echo
		a=
		i=0
		for f in "$SEARCHDIR"/$SEARCHPAT; do
			(( ++i ))
			a[$i]="$f"
			g=$(basename "$f")
			echo "  $i. $g"
			(( i == 9 )) && break
		done
		echo
		echo -n "Which one? (1-$i, q to quit) "
		j=0
		while (( j < 1 || j > i )); do
			read -n 1 j
			j=$(echo $j | tr '[:lower:]' '[:upper:]')
			[ "$j" = "Q" ] && echo && exit 0
			[[ "$j" < "1" || "$j" > "9" ]] && j=0
		done
		echo
		IMG="${a[$j]}"
	fi
else
	IMG="$1"
fi

# Check argument
if [ ! -f "$IMG" ]; then
	echo "Not a regular file: $IMG" 1>&2
	exit 2
fi
if [ ! -r "$IMG" ]; then
	echo "Not readable: $IMG" 1>&2
	exit 3
fi
EXT=$(echo ${IMG:(-4)} | tr '[:upper:]' '[:lower:]')
if [ "$EXT" != ".img" ]; then
	echo "File name extension '$EXT' should be: .img" 1>&2
	exit 4
fi

# Get SD card device name
echo -n "Searching for SD card ... "
for SDCARD in /dev/disk?; do
	FOUND=$(diskutil info $SDCARD | grep -cE 'SD/MMC|SDXC')
	[ "$FOUND" -gt 0 ] && break
done
if [ "$FOUND" -eq 0 ]; then
	echo 'Not found.' 1>&2
	exit 5
fi

# Let the user check!
echo "Found as device '$SDCARD'. Please double check! This memory card will be deleted:"
echo
diskutil list $SDCARD
echo

# Ask confirmation
CH=
read -n 1 -p "Write disk image to '$SDCARD', destroying all its data? (y/N) " CH
[ -z "$CH" ] && exit 0
echo
CH=$(echo $CH | tr '[:lower:]' '[:upper:]')
if [ "$CH" != "Y" ]; then
	echo "Aborted."
	exit 0
fi
RAW=/dev/rdisk${SDCARD:9}

# Unmount mounted SD card volumes
echo -n "Unmounting $SDCARD ... "
diskutil unmountdisk $SDCARD &> /dev/null
if [ $? -ne 0 ]; then
	echo "Failed."
	exit 6
fi
echo "Done."

# Write disk image file to SD card raw device
echo -n "This will require your password. Writing disk image to SD card ... "
sudo dd bs=1m if="$IMG" of=$RAW &> /dev/null
if [ $? -ne 0 ]; then
	echo "Failed."
	exit 7
fi
echo "Done."

# Prepare image for Wi-Fi connection and SSH access
echo -n "Preparing image for Wi-Fi connection and SSH access ... "
VOL='/Volumes/boot/'
TRY=3
while (( TRY > 0 )); do
	sleep 1
	(( --TRY ))
	[ -e "$VOL" ] && TRY=0
done
if [ -e "$VOL" ]; then
	if [ -d "$VOL" -a -r "$VOL" -a -w "$VOL" ]; then
		touch "${VOL}ssh"
		[ ! -f "${VOL}ssh" ] && echo "SSH access not configured."
		# WPACONF value set at top
		if [ -f "$WPACONF" -a -r "$WPACONF" ]; then
			cp "$WPACONF" "$VOL"
			if [ $? -eq 0 ]; then
				echo "Done."
			else
				echo "Wi-Fi configuration not copied."
				exit 8
			fi
		else
			echo "Wi-Fi configuration not found at: $WPACONF"
			exit 8
		fi
	else
		echo "Volume not mounted correctly."
		exit 8
	fi
else
	echo "Volume not found."
	exit 8
fi

# Eject SD card raw device
echo -n "Ejecting SD card ... "
diskutil eject $RAW &> /dev/null
[ $? -ne 0 ] && echo "Failed." && exit 9
echo "Done."
